buildscript {
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
      //  classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id "org.sonarqube" version "3.4.0.2513"
}

apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${minecraft_version}-${mod_version}"
group = "${mod_group_id}"

base {
    archivesName = "${mod_archive_base}"
}


sonarqube {
    properties {
        property "sonar.projectKey", "Growthcraft-1.18"
        property "sonar.organization", "growthcraftce"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('========================================')
println('Java: ' + System.getProperty('java.version'))
println(' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')')
println('Arch: ' + System.getProperty('os.arch'))
println("Build Version: ${mod_version}")
println('----------------------------------------')

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    // Access Transformers, this is a fixed path.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id+',growthcraft_apiary'+',growthcraft_apples'+',growthcraft_bamboo'+',growthcraft_cellar'+',growthcraft_milk'+',growthcraft_rice', '--all', '--output', file('src/generated/resources/'),
            '--existing', file('src/main/resources/'), '--flat'
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

/**
 * Project Dependent Repositories
 * ForgeGradle automatically adds the Forge maven and Maven Central for you
 */
repositories {
    // Curse Forge
    maven { url "https://www.cursemaven.com" }
    maven { //JEI
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
 	}
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    // compile against the JEI API but do not include it at runtime
    //compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
  	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    
    // Runtime mods for testing
    runtimeOnly fg.deobf("curse.maven:theoneprobe-${curseforge_theoneprobe}")
    runtimeOnly fg.deobf("curse.maven:jei-${curseforge_jei}")
    runtimeOnly fg.deobf("curse.maven:patchouli-${curseforge_patchouli}")
    runtimeOnly fg.deobf("curse.maven:appleskin-${curseforge_appleskin}")
    
    runtimeOnly fg.deobf("curse.maven:farmers_delight-${curseforge_farmers_delight}")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '7',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

//task sourcesJar(type: Jar) {
//   from sourceSets.main.allJava
//    classifier = 'src'
//}

//task deobjJar(type: Jar) {
//    from sourceSets.main.output
//    classifier 'deobf'
//}

//artifacts {
//    archives sourcesJar, deobjJar
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
